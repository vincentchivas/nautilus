# -*- coding: utf-8 -*-
"""
@author: zhhfang
@date: 2014-07-15
@description: some http interactions with provide service
"""

import logging
from django.utils import simplejson
from django.conf import settings
import requests
import os

STATIC_ROOT = settings.STATIC_ROOT
HOST = settings.HOST
PROVIDER_SITE = settings.PROVIDER_SITE

_LOGGER = logging.getLogger('getapi')


def get_json_api(url, params={}, default=None):
    """
    Send a GET request
    Parameters:
        -url: Request url address,
        -params: request parameters,
        -default: the implied return value,
    Return:
        -1. json data:The HTTP response body
        -2. default
    """
    try:
        res = requests.get(url, params=params)
        res.encoding = 'utf-8'
        if res.status_code != 200:
            _LOGGER.warning(
                "get a non-200 status_code for %s and %s", url, params)
            return default
        return simplejson.loads(res.text)
    except Exception as error:
        _LOGGER.exception(error)
        return default


def get_file(url, params={}):
    """
    GET file
    Parameters:
        -url: Request url address,
        -params: request parameters,
    Return:
        -1.The HTTP response body
    """
    try:
        res = requests.get(url, params=params)
        return res.content
    except Exception as error:
        _LOGGER.exception(error)


def get_app_info_list(appname=None, appversion=None):
    """
    get the info list of app, such as:
        [
            {
                'appname': 'xxx',
                'appversion': 'yyy',
                'latest_xml': {
                    'md5': 'xxxx',
                    'url': 'yyyy'
                }
            },
        ]
    the returned items should be sorted according to version if we can tell
    which version is the later from appversion string
    """
    url = "http://%s/provider/latestxml" % PROVIDER_SITE
    params = {}
    if appname is not None:
        params['appname'] = appname
    if appversion is not None:
        params['appversion'] = appversion
    data = get_json_api(url, params, default=[])
    return data


def get_app_tag_list(appname=None, appversion=None):
    """
    get the tag list of app, such as:
        [
            {
                'appname': 'xxx',
                'appversion': 'yyy',
                'latest_xml': {
                    'md5': 'xxxx',
                    'url': 'yyyy'
                }
            },
        ]
    the returned items should be sorted according to version if we can tell
    which version is the later from appversion string
    """
    url = "http://%s/provider/gettag" % PROVIDER_SITE
    params = {}
    if appname is not None:
        params['appname'] = appname
    if appversion is not None:
        params['appversion'] = appversion
    data = get_json_api(url, params, default=[])
    return data


def get_task_info(task_id):
    '''
    get the info of specified task, such as:
        {
            'status': 'finished',
            'apk_url': 'xxx'
        }

    task_id is the id of relevant snap
    '''
    url = "http://%s/provider/status" % PROVIDER_SITE
    params = {}
    params['snap_id'] = task_id
    return get_json_api(url, params, default={})


def get_xml_file(appname, appversion, url=None, md5=None):
    '''
    get the xml zip file according to appname, appversion and/or md5
    the url can be specified or use the default one
    the file name should be generated by caller
    '''
    if url is None:
        url = 'xxx'
    params = {'appname': appname, 'appversion': appversion}
    if md5 is not None:
        params['md5'] = md5
    return get_file(url, params)


def upload_xml_file(appname, appversion, snap_id, xmlfile, tag):
    """
    upload xml file to provider service
    Parameters:
        -appname: package name,
        -appversion: package version,
        -snap_id: the id of build task,
        -xmlfile: the down link of xml file,
        -tag: the tag of package,
    Return:
        -1. True: upload success
        -2. False: upload failed
    """
    url = "http://%s/provider/task" % PROVIDER_SITE
    if isinstance(xmlfile, basestring):
        filename = os.path.join(
            STATIC_ROOT, appname, appversion, "xml_%s.zip" % snap_id)
        file_object = open(filename, 'w+')
        file_object.write(xmlfile)
        file_object.close()
    xml_link = "http://%s/admin/upload/build/%s/%s/xml_%s.zip" % (
        HOST, appname, appversion, snap_id)
    data = {'appname': appname, 'appversion': appversion,
            'snap_id': snap_id, "xml_link": xml_link, "tag": tag}
    try:
        res = requests.post(url, data=data)
        if res.status_code != 200:
            _LOGGER.warning(
                "upload xmlfile for appname: %s appversion: %s and snap_id: %s"
                " failed", appname, appversion, snap_id)
            return False
        else:
            return True
    except Exception as error:
        _LOGGER.exception(error)
        return False

# -*- coding: utf-8 -*-
"""
@author: zhhfang
@date: 2014-07-15
@description: some http interactions with provide service
"""

import logging
import simplejson as json
import requests
# from . import exception

logger = logging.getLogger('getapi')


def get_json_api(url, params={}, default=None):
    try:
        res = requests.get(url, params=params)
        res.encoding = 'utf-8'
        if res.status_code != 200:
            logger.warning(
                "get a non-200 status_code for %s and %s", url, params)
            return default
        return json.loads(res.text)
    except Exception as e:
        logger.exception(e)
        return default


def get_file(url, params={}):
    try:
        res = requests.get(url, params=params)
        return res.content
    except Exception as e:
        logger.exception(e)


def get_app_info_list(appname=None, appversion=None):
    """
    get the info list of app, such as:
        [
            {
                'appname': 'xxx',
                'appversion': 'yyy',
                'latest_xml': {
                    'md5': 'xxxx',
                    'url': 'yyyy'
                }
            },
        ]
    the returned items should be sorted according to version if we can tell
    which version is the later from appversion string
    """
    url = "http://172.16.7.14/provider/latestxml"
    params = {}
    if appname is not None:
        params['appname'] = appname
    if appversion is not None:
        params['appversion'] = appversion
    data = get_json_api(url, params, default=[])
    print "get data is: %s" % data
    return data


def get_app_list():
    """
    get the app list, such as:
        [
            'dolphin-browser',
            'xxx'
        ]
    """
    url = 'xxx'
    return get_json_api(url, default=[])


def get_task_info(task_id):
    '''
    get the info of specified task, such as:
        {
            'status': 'finished',
            'apk_url': 'xxx'
        }

    task_id is the id of relevant snap
    '''
    url = 'xxx'
    return get_json_api(url, default={})


def get_xml_file(appname, appversion, url=None, md5=None):
    '''
    get the xml zip file according to appname, appversion and/or md5
    the url can be specified or use the default one
    the file name should be generated by caller
    '''
    if url is None:
        url = 'xxx'
    params = {'appname': appname, 'appversion': appversion}
    if md5 is not None:
        params['md5'] = md5
    return get_file(url, params)


def get_apk_file(task_id):
    task_info = get_task_info(task_id)
    if not task_info or task_info['status'] != 'finished':
        return
    return get_file(task_info.gert('apk_url', ''))


def upload_xml_file(xmlfile, appname, appversion, snap_id):
    url = 'xxx'
    if isinstance(xmlfile, basestring):
        xmlfile = file(xmlfile)
    data = {'appname': appname, 'appversion': appversion, 'snap_id': snap_id}
    try:
        res = requests.post(url, data=data, fiels={'xml_file': xmlfile})
        if res.status_code != 200:
            logger.warning(
                "upload xmlfile for appname: %s appversion: %s and snap_id: %s"
                " failed", appname, appversion, snap_id)
            return False
    except Exception as e:
        logger.exception(e)
        return False
